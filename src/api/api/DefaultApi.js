/**
 * OpenAPI citypizza
 * This is sionic server
 *
 * The version of the OpenAPI document: 2.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionGiftVariations from '../model/ActionGiftVariations';
import AddressSuggestion from '../model/AddressSuggestion';
import AuthRequest from '../model/AuthRequest';
import AuthResponse from '../model/AuthResponse';
import Branch from '../model/Branch';
import Cart from '../model/Cart';
import CartAddItem from '../model/CartAddItem';
import CartItem from '../model/CartItem';
import CartResult from '../model/CartResult';
import CartStats from '../model/CartStats';
import CategoryProducts from '../model/CategoryProducts';
import HouseAddress from '../model/HouseAddress';
import MenuLink from '../model/MenuLink';
import NewOrderRequest from '../model/NewOrderRequest';
import NewOrderResult from '../model/NewOrderResult';
import Order from '../model/Order';
import Page from '../model/Page';
import PingRes from '../model/PingRes';
import Product from '../model/Product';
import ProductSearchSuggest from '../model/ProductSearchSuggest';
import Profile from '../model/Profile';
import RegisterRequest from '../model/RegisterRequest';
import RegisterSmsRequest from '../model/RegisterSmsRequest';
import Result from '../model/Result';
import SelectGiftRequest from '../model/SelectGiftRequest';

/**
 * Default service.
 * @module api/DefaultApi
 * @version 2.0.1
 */
export default class DefaultApi {
  /**
   * Constructs a new DefaultApi.
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the actionsNeedSelectGift operation.
   * @callback module:api/DefaultApi~actionsNeedSelectGiftCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/ActionGiftVariations>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Акции, в которых нужно выбрать один из вариантов подарка
   * @param {Array.<Number>} ids
   * @param {module:api/DefaultApi~actionsNeedSelectGiftCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/ActionGiftVariations>}
   */
  actionsNeedSelectGift(ids, callback) {
    let postBody = null;
    // verify the required parameter 'ids' is set
    if (ids === undefined || ids === null) {
      throw new Error(
        "Missing the required parameter 'ids' when calling actionsNeedSelectGift",
      );
    }

    let pathParams = {};
    let queryParams = {
      ids: this.apiClient.buildCollectionParam(ids, 'csv'),
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [ActionGiftVariations];
    return this.apiClient.callApi(
      '/action/need_select',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the actionsSelectGift operation.
   * @callback module:api/DefaultApi~actionsSelectGiftCallback
   * @param {String} error Error message, if any.
   * @param {module:model/CartResult} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Выбор подарка по акции
   * В запросе в каждом блоке GiftVariationBlock должен быть один выбранный элемент из items
   * @param {Object} opts Optional parameters
   * @param {module:model/SelectGiftRequest} opts.selectGiftRequest
   * @param {module:api/DefaultApi~actionsSelectGiftCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/CartResult}
   */
  actionsSelectGift(opts, callback) {
    opts = opts || {};
    let postBody = opts.selectGiftRequest;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = CartResult;
    return this.apiClient.callApi(
      '/action/select_gift',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the addressResolve operation.
   * @callback module:api/DefaultApi~addressResolveCallback
   * @param {String} error Error message, if any.
   * @param {module:model/HouseAddress} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Разбор адреса, определение координат и ближайшего метро
   * @param {String} address
   * @param {module:api/DefaultApi~addressResolveCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/HouseAddress}
   */
  addressResolve(address, callback) {
    let postBody = null;
    // verify the required parameter 'address' is set
    if (address === undefined || address === null) {
      throw new Error(
        "Missing the required parameter 'address' when calling addressResolve",
      );
    }

    let pathParams = {};
    let queryParams = {
      address: address,
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = HouseAddress;
    return this.apiClient.callApi(
      '/address/resolve',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the addressSuggest operation.
   * @callback module:api/DefaultApi~addressSuggestCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/AddressSuggestion>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Автодополнение адреса
   * @param {String} query
   * @param {module:api/DefaultApi~addressSuggestCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/AddressSuggestion>}
   */
  addressSuggest(query, callback) {
    let postBody = null;
    // verify the required parameter 'query' is set
    if (query === undefined || query === null) {
      throw new Error(
        "Missing the required parameter 'query' when calling addressSuggest",
      );
    }

    let pathParams = {};
    let queryParams = {
      query: query,
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [AddressSuggestion];
    return this.apiClient.callApi(
      '/address/suggest',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the authLogin operation.
   * @callback module:api/DefaultApi~authLoginCallback
   * @param {String} error Error message, if any.
   * @param {module:model/AuthResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Авторизация
   * @param {Object} opts Optional parameters
   * @param {module:model/AuthRequest} opts.authRequest
   * @param {module:api/DefaultApi~authLoginCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/AuthResponse}
   */
  authLogin(opts, callback) {
    opts = opts || {};
    let postBody = opts.authRequest;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = AuthResponse;
    return this.apiClient.callApi(
      '/auth/login',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the authLogout operation.
   * @callback module:api/DefaultApi~authLogoutCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Result} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Выход
   * @param {module:api/DefaultApi~authLogoutCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Result}
   */
  authLogout(callback) {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Result;
    return this.apiClient.callApi(
      '/auth/logout',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the authRegister operation.
   * @callback module:api/DefaultApi~authRegisterCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Result} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Регистрация
   * @param {Object} opts Optional parameters
   * @param {module:model/RegisterRequest} opts.registerRequest
   * @param {module:api/DefaultApi~authRegisterCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Result}
   */
  authRegister(opts, callback) {
    opts = opts || {};
    let postBody = opts.registerRequest;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Result;
    return this.apiClient.callApi(
      '/auth/register',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the authRegisterSms operation.
   * @callback module:api/DefaultApi~authRegisterSmsCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Result} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Отправка sms для подтверждения регистрации
   * @param {Object} opts Optional parameters
   * @param {module:model/RegisterSmsRequest} opts.registerSmsRequest
   * @param {module:api/DefaultApi~authRegisterSmsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Result}
   */
  authRegisterSms(opts, callback) {
    opts = opts || {};
    let postBody = opts.registerSmsRequest;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Result;
    return this.apiClient.callApi(
      '/auth/register_sms',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the branches operation.
   * @callback module:api/DefaultApi~branchesCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/Branch>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Список городов-филиалов
   * От выбранного города зависят зоны доставки, доступные товары, скидки и пр.
   * @param {module:api/DefaultApi~branchesCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/Branch>}
   */
  branches(callback) {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [Branch];
    return this.apiClient.callApi(
      '/branch/list',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the cartAdd operation.
   * @callback module:api/DefaultApi~cartAddCallback
   * @param {String} error Error message, if any.
   * @param {module:model/CartResult} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Добавление товара в корзину
   * @param {Object} opts Optional parameters
   * @param {module:model/CartAddItem} opts.cartAddItem
   * @param {module:api/DefaultApi~cartAddCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/CartResult}
   */
  cartAdd(opts, callback) {
    opts = opts || {};
    let postBody = opts.cartAddItem;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = CartResult;
    return this.apiClient.callApi(
      '/cart/add',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the cartChange operation.
   * @callback module:api/DefaultApi~cartChangeCallback
   * @param {String} error Error message, if any.
   * @param {module:model/CartResult} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Обновление товара в корзине
   * @param {Object} opts Optional parameters
   * @param {module:model/CartItem} opts.cartItem
   * @param {module:api/DefaultApi~cartChangeCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/CartResult}
   */
  cartChange(opts, callback) {
    opts = opts || {};
    let postBody = opts.cartItem;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = CartResult;
    return this.apiClient.callApi(
      '/cart/change',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the cartGet operation.
   * @callback module:api/DefaultApi~cartGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Cart} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Корзинa
   * @param {module:api/DefaultApi~cartGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Cart}
   */
  cartGet(callback) {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Cart;
    return this.apiClient.callApi(
      '/cart/cart',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the cartOrder operation.
   * @callback module:api/DefaultApi~cartOrderCallback
   * @param {String} error Error message, if any.
   * @param {module:model/NewOrderResult} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Заказ
   * @param {Object} opts Optional parameters
   * @param {module:model/NewOrderRequest} opts.newOrderRequest
   * @param {module:api/DefaultApi~cartOrderCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/NewOrderResult}
   */
  cartOrder(opts, callback) {
    opts = opts || {};
    let postBody = opts.newOrderRequest;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = NewOrderResult;
    return this.apiClient.callApi(
      '/cart/order',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the cartRemove operation.
   * @callback module:api/DefaultApi~cartRemoveCallback
   * @param {String} error Error message, if any.
   * @param {module:model/CartResult} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Удаление товара из корзины
   * @param {String} key
   * @param {module:api/DefaultApi~cartRemoveCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/CartResult}
   */
  cartRemove(key, callback) {
    let postBody = null;
    // verify the required parameter 'key' is set
    if (key === undefined || key === null) {
      throw new Error(
        "Missing the required parameter 'key' when calling cartRemove",
      );
    }

    let pathParams = {};
    let queryParams = {
      key: key,
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = CartResult;
    return this.apiClient.callApi(
      '/cart/remove',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the cartSetPlanDate operation.
   * @callback module:api/DefaultApi~cartSetPlanDateCallback
   * @param {String} error Error message, if any.
   * @param {module:model/CartResult} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Установка планируемого времени доставки
   * @param {String} _date
   * @param {module:api/DefaultApi~cartSetPlanDateCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/CartResult}
   */
  cartSetPlanDate(_date, callback) {
    let postBody = null;
    // verify the required parameter '_date' is set
    if (_date === undefined || _date === null) {
      throw new Error(
        "Missing the required parameter '_date' when calling cartSetPlanDate",
      );
    }

    let pathParams = {};
    let queryParams = {
      date: _date,
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = CartResult;
    return this.apiClient.callApi(
      '/cart/plan_date',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the cartStats operation.
   * @callback module:api/DefaultApi~cartStatsCallback
   * @param {String} error Error message, if any.
   * @param {module:model/CartStats} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Сводная информация по корзине
   * @param {module:api/DefaultApi~cartStatsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/CartStats}
   */
  cartStats(callback) {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = CartStats;
    return this.apiClient.callApi(
      '/cart/stats',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the categoryBySlug operation.
   * @callback module:api/DefaultApi~categoryBySlugCallback
   * @param {String} error Error message, if any.
   * @param {module:model/CategoryProducts} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Возвращает категорию и список товаров по slug категории
   * @param {String} slug
   * @param {module:api/DefaultApi~categoryBySlugCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/CategoryProducts}
   */
  categoryBySlug(slug, callback) {
    let postBody = null;
    // verify the required parameter 'slug' is set
    if (slug === undefined || slug === null) {
      throw new Error(
        "Missing the required parameter 'slug' when calling categoryBySlug",
      );
    }

    let pathParams = {};
    let queryParams = {
      slug: slug,
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = CategoryProducts;
    return this.apiClient.callApi(
      '/category/by_slug',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the couponAdd operation.
   * @callback module:api/DefaultApi~couponAddCallback
   * @param {String} error Error message, if any.
   * @param {module:model/CartResult} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Добавление купона
   * @param {String} coupon
   * @param {module:api/DefaultApi~couponAddCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/CartResult}
   */
  couponAdd(coupon, callback) {
    let postBody = null;
    // verify the required parameter 'coupon' is set
    if (coupon === undefined || coupon === null) {
      throw new Error(
        "Missing the required parameter 'coupon' when calling couponAdd",
      );
    }

    let pathParams = {};
    let queryParams = {
      coupon: coupon,
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = CartResult;
    return this.apiClient.callApi(
      '/coupon/add',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the couponRemove operation.
   * @callback module:api/DefaultApi~couponRemoveCallback
   * @param {String} error Error message, if any.
   * @param {module:model/CartResult} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Удаление купона
   * @param {String} coupon
   * @param {module:api/DefaultApi~couponRemoveCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/CartResult}
   */
  couponRemove(coupon, callback) {
    let postBody = null;
    // verify the required parameter 'coupon' is set
    if (coupon === undefined || coupon === null) {
      throw new Error(
        "Missing the required parameter 'coupon' when calling couponRemove",
      );
    }

    let pathParams = {};
    let queryParams = {
      coupon: coupon,
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = CartResult;
    return this.apiClient.callApi(
      '/coupon/remove',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the menuLeft operation.
   * @callback module:api/DefaultApi~menuLeftCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/MenuLink>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Левое меню
   * @param {module:api/DefaultApi~menuLeftCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/MenuLink>}
   */
  menuLeft(callback) {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [MenuLink];
    return this.apiClient.callApi(
      '/menu/left',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the orderById operation.
   * @callback module:api/DefaultApi~orderByIdCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Order} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Заказ по ID
   * Токен заказа обязателен
   * @param {Number} id
   * @param {String} token
   * @param {module:api/DefaultApi~orderByIdCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Order}
   */
  orderById(id, token, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling orderById",
      );
    }
    // verify the required parameter 'token' is set
    if (token === undefined || token === null) {
      throw new Error(
        "Missing the required parameter 'token' when calling orderById",
      );
    }

    let pathParams = {};
    let queryParams = {
      id: id,
      token: token,
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Order;
    return this.apiClient.callApi(
      '/order/by_id',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the pageByPath operation.
   * @callback module:api/DefaultApi~pageByPathCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Page} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Возвращает страницу по пути
   * Путь страницы складывается из пути родителя и slug страницы
   * @param {String} path
   * @param {module:api/DefaultApi~pageByPathCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Page}
   */
  pageByPath(path, callback) {
    let postBody = null;
    // verify the required parameter 'path' is set
    if (path === undefined || path === null) {
      throw new Error(
        "Missing the required parameter 'path' when calling pageByPath",
      );
    }

    let pathParams = {};
    let queryParams = {
      path: path,
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Page;
    return this.apiClient.callApi(
      '/page/by_path',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the ping operation.
   * @callback module:api/DefaultApi~pingCallback
   * @param {String} error Error message, if any.
   * @param {module:model/PingRes} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Ping pong
   * Тестирование API. Возвращает hits+1
   * @param {Number} hits
   * @param {module:api/DefaultApi~pingCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/PingRes}
   */
  ping(hits, callback) {
    let postBody = null;
    // verify the required parameter 'hits' is set
    if (hits === undefined || hits === null) {
      throw new Error(
        "Missing the required parameter 'hits' when calling ping",
      );
    }

    let pathParams = {};
    let queryParams = {
      hits: hits,
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = PingRes;
    return this.apiClient.callApi(
      '/main/ping',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the productByIds operation.
   * @callback module:api/DefaultApi~productByIdsCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/Product>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Возвращает информацию о товарах по ids
   * @param {Array.<Number>} ids
   * @param {module:api/DefaultApi~productByIdsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/Product>}
   */
  productByIds(ids, callback) {
    let postBody = null;
    // verify the required parameter 'ids' is set
    if (ids === undefined || ids === null) {
      throw new Error(
        "Missing the required parameter 'ids' when calling productByIds",
      );
    }

    let pathParams = {};
    let queryParams = {
      ids: this.apiClient.buildCollectionParam(ids, 'csv'),
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [Product];
    return this.apiClient.callApi(
      '/product/by_ids',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the productBySlug operation.
   * @callback module:api/DefaultApi~productBySlugCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Product} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Возвращает полную информацию о товаре по slug
   * @param {String} slug
   * @param {module:api/DefaultApi~productBySlugCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Product}
   */
  productBySlug(slug, callback) {
    let postBody = null;
    // verify the required parameter 'slug' is set
    if (slug === undefined || slug === null) {
      throw new Error(
        "Missing the required parameter 'slug' when calling productBySlug",
      );
    }

    let pathParams = {};
    let queryParams = {
      slug: slug,
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Product;
    return this.apiClient.callApi(
      '/product/by_slug',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the profiles operation.
   * @callback module:api/DefaultApi~profilesCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/Profile>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Список профилей (реквизитов для доставки)
   * null
   * @param {module:api/DefaultApi~profilesCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/Profile>}
   */
  profiles(callback) {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [Profile];
    return this.apiClient.callApi(
      '/profile/list',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the search operation.
   * @callback module:api/DefaultApi~searchCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/Product>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Поиск по товарам
   * Максимум 60 записей
   * @param {String} query
   * @param {module:api/DefaultApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/Product>}
   */
  search(query, callback) {
    let postBody = null;
    // verify the required parameter 'query' is set
    if (query === undefined || query === null) {
      throw new Error(
        "Missing the required parameter 'query' when calling search",
      );
    }

    let pathParams = {};
    let queryParams = {
      query: query,
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [Product];
    return this.apiClient.callApi(
      '/search/search',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the searchSuggest operation.
   * @callback module:api/DefaultApi~searchSuggestCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/ProductSearchSuggest>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Подсказки при поиске
   * @param {String} query
   * @param {module:api/DefaultApi~searchSuggestCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/ProductSearchSuggest>}
   */
  searchSuggest(query, callback) {
    let postBody = null;
    // verify the required parameter 'query' is set
    if (query === undefined || query === null) {
      throw new Error(
        "Missing the required parameter 'query' when calling searchSuggest",
      );
    }

    let pathParams = {};
    let queryParams = {
      query: query,
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [ProductSearchSuggest];
    return this.apiClient.callApi(
      '/search/suggest',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the setPaymentMethod operation.
   * @callback module:api/DefaultApi~setPaymentMethodCallback
   * @param {String} error Error message, if any.
   * @param {module:model/CartResult} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Установка метода оплаты
   * @param {String} id
   * @param {module:api/DefaultApi~setPaymentMethodCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/CartResult}
   */
  setPaymentMethod(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling setPaymentMethod",
      );
    }

    let pathParams = {};
    let queryParams = {
      id: id,
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = CartResult;
    return this.apiClient.callApi(
      '/cart/set_payment_method',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }
}
