/**
 * OpenAPI citypizza
 * This is sionic server
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CartMessage model module.
 * @module model/CartMessage
 * @version 2.0.1
 */
class CartMessage {
    /**
     * Constructs a new <code>CartMessage</code>.
     * Сообщения в корзине
     * @alias module:model/CartMessage
     * @param id {String} 
     * @param type {String} 
     */
    constructor(id, type) { 
        
        CartMessage.initialize(this, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type) { 
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CartMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CartMessage} obj Optional instance to populate.
     * @return {module:model/CartMessage} The populated <code>CartMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CartMessage();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('removable')) {
                obj['removable'] = ApiClient.convertToType(data['removable'], 'Boolean');
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'Boolean');
            }
            if (data.hasOwnProperty('align')) {
                obj['align'] = ApiClient.convertToType(data['align'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
CartMessage.prototype['id'] = undefined;

/**
 * @member {Array.<String>} text
 */
CartMessage.prototype['text'] = undefined;

/**
 * @member {String} type
 */
CartMessage.prototype['type'] = undefined;

/**
 * @member {Boolean} removable
 */
CartMessage.prototype['removable'] = undefined;

/**
 * @member {Boolean} display
 */
CartMessage.prototype['display'] = undefined;

/**
 * @member {String} align
 */
CartMessage.prototype['align'] = undefined;






export default CartMessage;

