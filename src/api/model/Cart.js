/**
 * OpenAPI citypizza
 * This is sionic server
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CartItem from './CartItem';
import CartMessage from './CartMessage';
import PaymentMethod from './PaymentMethod';

/**
 * The Cart model module.
 * @module model/Cart
 * @version 2.0.1
 */
class Cart {
    /**
     * Constructs a new <code>Cart</code>.
     * null
     * @alias module:model/Cart
     * @param sum {Number} 
     * @param originalSum {Number} 
     * @param paymentMethodId {String} 
     * @param items {Array.<module:model/CartItem>} 
     * @param appliedCoupons {Array.<String>} 
     * @param messages {Array.<module:model/CartMessage>} 
     * @param paymentMethods {Array.<module:model/PaymentMethod>} 
     */
    constructor(sum, originalSum, paymentMethodId, items, appliedCoupons, messages, paymentMethods) { 
        
        Cart.initialize(this, sum, originalSum, paymentMethodId, items, appliedCoupons, messages, paymentMethods);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sum, originalSum, paymentMethodId, items, appliedCoupons, messages, paymentMethods) { 
        obj['sum'] = sum;
        obj['original_sum'] = originalSum;
        obj['payment_method_id'] = paymentMethodId;
        obj['items'] = items;
        obj['applied_coupons'] = appliedCoupons;
        obj['messages'] = messages;
        obj['payment_methods'] = paymentMethods;
    }

    /**
     * Constructs a <code>Cart</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cart} obj Optional instance to populate.
     * @return {module:model/Cart} The populated <code>Cart</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cart();

            if (data.hasOwnProperty('sum')) {
                obj['sum'] = ApiClient.convertToType(data['sum'], 'Number');
            }
            if (data.hasOwnProperty('original_sum')) {
                obj['original_sum'] = ApiClient.convertToType(data['original_sum'], 'Number');
            }
            if (data.hasOwnProperty('plandate')) {
                obj['plandate'] = ApiClient.convertToType(data['plandate'], 'String');
            }
            if (data.hasOwnProperty('payment_method_id')) {
                obj['payment_method_id'] = ApiClient.convertToType(data['payment_method_id'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [CartItem]);
            }
            if (data.hasOwnProperty('applied_coupons')) {
                obj['applied_coupons'] = ApiClient.convertToType(data['applied_coupons'], ['String']);
            }
            if (data.hasOwnProperty('messages')) {
                obj['messages'] = ApiClient.convertToType(data['messages'], [CartMessage]);
            }
            if (data.hasOwnProperty('payment_methods')) {
                obj['payment_methods'] = ApiClient.convertToType(data['payment_methods'], [PaymentMethod]);
            }
            if (data.hasOwnProperty('actions_need_select')) {
                obj['actions_need_select'] = ApiClient.convertToType(data['actions_need_select'], ['Number']);
            }
        }
        return obj;
    }


}

/**
 * @member {Number} sum
 */
Cart.prototype['sum'] = undefined;

/**
 * @member {Number} original_sum
 */
Cart.prototype['original_sum'] = undefined;

/**
 * @member {String} plandate
 */
Cart.prototype['plandate'] = undefined;

/**
 * @member {String} payment_method_id
 */
Cart.prototype['payment_method_id'] = undefined;

/**
 * @member {Array.<module:model/CartItem>} items
 */
Cart.prototype['items'] = undefined;

/**
 * @member {Array.<String>} applied_coupons
 */
Cart.prototype['applied_coupons'] = undefined;

/**
 * @member {Array.<module:model/CartMessage>} messages
 */
Cart.prototype['messages'] = undefined;

/**
 * @member {Array.<module:model/PaymentMethod>} payment_methods
 */
Cart.prototype['payment_methods'] = undefined;

/**
 * В корзине есть акции, для которых необходимо выбрать один из вариантов подарка. См. /action/need_select
 * @member {Array.<Number>} actions_need_select
 */
Cart.prototype['actions_need_select'] = undefined;






export default Cart;

