/**
 * OpenAPI citypizza
 * This is sionic server
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CartIngredient model module.
 * @module model/CartIngredient
 * @version 2.0.1
 */
class CartIngredient {
    /**
     * Constructs a new <code>CartIngredient</code>.
     * null
     * @alias module:model/CartIngredient
     * @param id {Number} 
     * @param variationId {Number} 
     * @param quantity {Number} 
     * @param price {Number} Фактическая цена (заполнен в корзине, пустой в запросе на добавление)
     * @param originalPrice {Number} Цена без скидки (заполнен в корзине, пустой в запросе на добавление)
     */
    constructor(id, variationId, quantity, price, originalPrice) { 
        
        CartIngredient.initialize(this, id, variationId, quantity, price, originalPrice);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, variationId, quantity, price, originalPrice) { 
        obj['id'] = id;
        obj['variation_id'] = variationId;
        obj['quantity'] = quantity;
        obj['price'] = price;
        obj['original_price'] = originalPrice;
    }

    /**
     * Constructs a <code>CartIngredient</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CartIngredient} obj Optional instance to populate.
     * @return {module:model/CartIngredient} The populated <code>CartIngredient</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CartIngredient();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('variation_id')) {
                obj['variation_id'] = ApiClient.convertToType(data['variation_id'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('original_price')) {
                obj['original_price'] = ApiClient.convertToType(data['original_price'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
CartIngredient.prototype['id'] = undefined;

/**
 * @member {Number} variation_id
 */
CartIngredient.prototype['variation_id'] = undefined;

/**
 * @member {Number} quantity
 */
CartIngredient.prototype['quantity'] = undefined;

/**
 * Фактическая цена (заполнен в корзине, пустой в запросе на добавление)
 * @member {Number} price
 */
CartIngredient.prototype['price'] = undefined;

/**
 * Цена без скидки (заполнен в корзине, пустой в запросе на добавление)
 * @member {Number} original_price
 */
CartIngredient.prototype['original_price'] = undefined;






export default CartIngredient;

