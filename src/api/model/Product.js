/**
 * OpenAPI citypizza
 * This is sionic server
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompositeBlock from './CompositeBlock';
import Ingredient from './Ingredient';
import ProductVariation from './ProductVariation';

/**
 * The Product model module.
 * @module model/Product
 * @version 2.0.1
 */
class Product {
    /**
     * Constructs a new <code>Product</code>.
     * null
     * @alias module:model/Product
     * @param id {Number} 
     * @param slug {String} 
     * @param type {module:model/Product.TypeEnum} 
     * @param variationId {Number} 
     * @param name {String} 
     * @param shortDescription {String} 
     * @param fullDescription {String} 
     * @param imageUrl {String} Ссылка на изображение для списка (может быть пустой строкой)
     * @param fullImageUrl {String} Ссылка на изображение для карточки товара  (может быть пустой строкой)
     * @param price {Number} 
     * @param variations {Array.<module:model/ProductVariation>} 
     * @param hasIngredients {Boolean} 
     */
    constructor(id, slug, type, variationId, name, shortDescription, fullDescription, imageUrl, fullImageUrl, price, variations, hasIngredients) { 
        
        Product.initialize(this, id, slug, type, variationId, name, shortDescription, fullDescription, imageUrl, fullImageUrl, price, variations, hasIngredients);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, slug, type, variationId, name, shortDescription, fullDescription, imageUrl, fullImageUrl, price, variations, hasIngredients) { 
        obj['id'] = id;
        obj['slug'] = slug;
        obj['type'] = type;
        obj['variation_id'] = variationId;
        obj['name'] = name;
        obj['short_description'] = shortDescription;
        obj['full_description'] = fullDescription;
        obj['image_url'] = imageUrl;
        obj['full_image_url'] = fullImageUrl;
        obj['price'] = price;
        obj['variations'] = variations;
        obj['has_ingredients'] = hasIngredients;
    }

    /**
     * Constructs a <code>Product</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Product} obj Optional instance to populate.
     * @return {module:model/Product} The populated <code>Product</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Product();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('variation_id')) {
                obj['variation_id'] = ApiClient.convertToType(data['variation_id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('short_description')) {
                obj['short_description'] = ApiClient.convertToType(data['short_description'], 'String');
            }
            if (data.hasOwnProperty('full_description')) {
                obj['full_description'] = ApiClient.convertToType(data['full_description'], 'String');
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('full_image_url')) {
                obj['full_image_url'] = ApiClient.convertToType(data['full_image_url'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'String');
            }
            if (data.hasOwnProperty('variations')) {
                obj['variations'] = ApiClient.convertToType(data['variations'], [ProductVariation]);
            }
            if (data.hasOwnProperty('has_ingredients')) {
                obj['has_ingredients'] = ApiClient.convertToType(data['has_ingredients'], 'Boolean');
            }
            if (data.hasOwnProperty('composite_blocks')) {
                obj['composite_blocks'] = ApiClient.convertToType(data['composite_blocks'], [CompositeBlock]);
            }
            if (data.hasOwnProperty('composite_ingredients')) {
                obj['composite_ingredients'] = ApiClient.convertToType(data['composite_ingredients'], [Ingredient]);
            }
            if (data.hasOwnProperty('composite_ingredients_max_qty')) {
                obj['composite_ingredients_max_qty'] = ApiClient.convertToType(data['composite_ingredients_max_qty'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
Product.prototype['id'] = undefined;

/**
 * @member {String} slug
 */
Product.prototype['slug'] = undefined;

/**
 * @member {module:model/Product.TypeEnum} type
 */
Product.prototype['type'] = undefined;

/**
 * @member {Number} variation_id
 */
Product.prototype['variation_id'] = undefined;

/**
 * @member {String} name
 */
Product.prototype['name'] = undefined;

/**
 * @member {String} short_description
 */
Product.prototype['short_description'] = undefined;

/**
 * @member {String} full_description
 */
Product.prototype['full_description'] = undefined;

/**
 * Ссылка на изображение для списка (может быть пустой строкой)
 * @member {String} image_url
 */
Product.prototype['image_url'] = undefined;

/**
 * Ссылка на изображение для карточки товара  (может быть пустой строкой)
 * @member {String} full_image_url
 */
Product.prototype['full_image_url'] = undefined;

/**
 * @member {Number} price
 */
Product.prototype['price'] = undefined;

/**
 * @member {String} weight
 */
Product.prototype['weight'] = undefined;

/**
 * @member {Array.<module:model/ProductVariation>} variations
 */
Product.prototype['variations'] = undefined;

/**
 * @member {Boolean} has_ingredients
 */
Product.prototype['has_ingredients'] = undefined;

/**
 * Товары для составных товаров и половины пицц (только в полной информации о продукте)
 * @member {Array.<module:model/CompositeBlock>} composite_blocks
 */
Product.prototype['composite_blocks'] = undefined;

/**
 * Ингредиенты для составных товаров и половин пицц (только в полной информации о продукте)
 * @member {Array.<module:model/Ingredient>} composite_ingredients
 */
Product.prototype['composite_ingredients'] = undefined;

/**
 * Максимальное кол-во ингредиентов
 * @member {Number} composite_ingredients_max_qty
 */
Product.prototype['composite_ingredients_max_qty'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Product['TypeEnum'] = {

    /**
     * value: "simple"
     * @const
     */
    "simple": "simple",

    /**
     * value: "variable"
     * @const
     */
    "variable": "variable",

    /**
     * value: "halve"
     * @const
     */
    "halve": "halve",

    /**
     * value: "superbox"
     * @const
     */
    "superbox": "superbox",

    /**
     * value: "citybox"
     * @const
     */
    "citybox": "citybox",

    /**
     * value: "multiple"
     * @const
     */
    "multiple": "multiple"
};



export default Product;

