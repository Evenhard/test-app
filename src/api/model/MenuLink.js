/**
 * OpenAPI citypizza
 * This is sionic server
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MenuLink model module.
 * @module model/MenuLink
 * @version 2.0.1
 */
class MenuLink {
    /**
     * Constructs a new <code>MenuLink</code>.
     * null
     * @alias module:model/MenuLink
     * @param name {String} 
     * @param type {module:model/MenuLink.TypeEnum} 
     * @param path {String} Путь до объкта (slug товара, категории, страницы или ссылка меню), на который указывает меню. На основе пити и типа формируется абсолютная ссылка.
     * @param iconUrl {String} Ссылка на изображение (может быть пустой строкой)
     */
    constructor(name, type, path, iconUrl) { 
        
        MenuLink.initialize(this, name, type, path, iconUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type, path, iconUrl) { 
        obj['name'] = name;
        obj['type'] = type;
        obj['path'] = path;
        obj['icon_url'] = iconUrl;
    }

    /**
     * Constructs a <code>MenuLink</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MenuLink} obj Optional instance to populate.
     * @return {module:model/MenuLink} The populated <code>MenuLink</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MenuLink();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('icon_url')) {
                obj['icon_url'] = ApiClient.convertToType(data['icon_url'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} name
 */
MenuLink.prototype['name'] = undefined;

/**
 * @member {module:model/MenuLink.TypeEnum} type
 */
MenuLink.prototype['type'] = undefined;

/**
 * Путь до объкта (slug товара, категории, страницы или ссылка меню), на который указывает меню. На основе пити и типа формируется абсолютная ссылка.
 * @member {String} path
 */
MenuLink.prototype['path'] = undefined;

/**
 * Ссылка на изображение (может быть пустой строкой)
 * @member {String} icon_url
 */
MenuLink.prototype['icon_url'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
MenuLink['TypeEnum'] = {

    /**
     * value: "page"
     * @const
     */
    "page": "page",

    /**
     * value: "category"
     * @const
     */
    "category": "category",

    /**
     * value: "product"
     * @const
     */
    "product": "product",

    /**
     * value: "link"
     * @const
     */
    "link": "link"
};



export default MenuLink;

