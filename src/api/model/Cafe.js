/**
 * OpenAPI citypizza
 * This is sionic server
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Cafe model module.
 * @module model/Cafe
 * @version 2.0.1
 */
class Cafe {
    /**
     * Constructs a new <code>Cafe</code>.
     * Кафе, ресторан, оффлайн точка продаж
     * @alias module:model/Cafe
     * @param id {Number} 
     * @param type {module:model/Cafe.TypeEnum} 
     * @param name {String} 
     * @param description {String} 
     * @param address {String} 
     * @param metro {String} 
     */
    constructor(id, type, name, description, address, metro) { 
        
        Cafe.initialize(this, id, type, name, description, address, metro);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type, name, description, address, metro) { 
        obj['id'] = id;
        obj['type'] = type;
        obj['name'] = name;
        obj['description'] = description;
        obj['address'] = address;
        obj['metro'] = metro;
    }

    /**
     * Constructs a <code>Cafe</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cafe} obj Optional instance to populate.
     * @return {module:model/Cafe} The populated <code>Cafe</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cafe();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('metro')) {
                obj['metro'] = ApiClient.convertToType(data['metro'], 'String');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
Cafe.prototype['id'] = undefined;

/**
 * @member {module:model/Cafe.TypeEnum} type
 */
Cafe.prototype['type'] = undefined;

/**
 * @member {String} name
 */
Cafe.prototype['name'] = undefined;

/**
 * @member {String} description
 */
Cafe.prototype['description'] = undefined;

/**
 * @member {String} address
 */
Cafe.prototype['address'] = undefined;

/**
 * @member {String} metro
 */
Cafe.prototype['metro'] = undefined;

/**
 * Широта геоточки.
 * @member {Number} lat
 */
Cafe.prototype['lat'] = undefined;

/**
 * Долгота геоточки.
 * @member {Number} lng
 */
Cafe.prototype['lng'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Cafe['TypeEnum'] = {

    /**
     * value: "branch"
     * @const
     */
    "branch": "branch",

    /**
     * value: "restaurant"
     * @const
     */
    "restaurant": "restaurant"
};



export default Cafe;

